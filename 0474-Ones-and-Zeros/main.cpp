/***********************************
* File:     main.cpp
*
* Author:   caipeng
*
* Email:    iiicp@outlook.com
*
* Date:     2020/12/31
***********************************/
#include <string>
#include <vector>
#include <iostream>

using namespace std;

class Solution {
    vector<vector<vector<int>>> memo;
    int tryFindMaxForm(vector<string>& strs, int index, int m, int n) {
        if (m == 0 && n == 0) {
            return 0;
        }

        if (index < 0)
            return 0;

        if (memo[index][m][n] != -1)
            return memo[index][m][n];

        int res = tryFindMaxForm(strs, index - 1, m, n);

        int zeroNum = 0, oneNum = 0;
        for (int j = 0; j < strs[index].size(); ++j)
            if (strs[index][j] == '0')
                zeroNum++;
            else
                oneNum++;

        if (m >= zeroNum && n >= oneNum) {
            res = max(res, 1 + tryFindMaxForm(strs, index - 1, m - zeroNum, n - oneNum));
        }
        memo[index][m][n] = res;

        return res;
    }

    /**
     * 考虑第i个串后，m和n的数量
     *
     */
    int tryFindMaxForm_dp(vector<string>& strs, int m, int n) {
        vector<int> mCost(strs.size(), 0), nCost(strs.size(), 0);
        for (int i = 0; i < strs.size(); ++i)
            for (int j = 0; j < strs[i].size(); ++j) {
                if (strs[i][j] == '0')
                    mCost[i]++;
                else {
                    nCost[i]++;
                }
            }

        vector<vector<vector<int>>> dp(strs.size(), vector<vector<int>>(m+1, vector<int>(n+1, 0)));

        /// 考虑第0个串的情况
        /// 第0串的情况下，当u>=mCost[0] && v>= nCost[0]，就是能存放当前的串，标志位1
        for (int u = mCost[0]; u <= m; ++u)
            for (int v = nCost[0]; v <= n; ++v) {
                dp[0][u][v] = 1;
            }
        for (int i = 1; i < strs.size(); ++i) {
            for (int u = 0; u <= m; u++) {
                for (int v = 0; v <= n; v++) {
                    dp[i][u][v] = dp[i-1][u][v];
                    if (u >= mCost[i] && v >= nCost[i])
                        dp[i][u][v] = max(dp[i][u][v], 1 + dp[i-1][u-mCost[i]][v-nCost[i]]);
                }
            }
        }
    }

public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        memo = vector<vector<vector<int>>>(strs.size(), vector<vector<int>>(m + 1, vector<int>(n + 1, -1)));
        return tryFindMaxForm(strs, strs.size() - 1, m, n);
    }
};

int main() {

    vector<string> strs{};
    std::cout << Solution().findMaxForm(strs, 30, 30) << std::endl;

//    vector<string> strs2{"10", "0", "1"};
//    std::cout << Solution().findMaxForm(strs2, 1, 1) << std::endl;

    return 0;
}
